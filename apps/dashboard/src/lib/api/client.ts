/**
 * Generated by orval v7.11.2 🍺
 * Do not edit manually.
 * CostWatch API
 * OpenAPI 3.1.0 Specification for CostWatch API.
 * OpenAPI spec version: 2.0.0
 */
export interface AlertRule {
	metric: string;
	service: string;
	threshold: number;
}

export type AlertRuleListResponseItemsItem = {
	metric?: string;
	service?: string;
	threshold?: number;
};

export interface AlertRuleListResponse {
	items: AlertRuleListResponseItemsItem[];
	readonly: boolean;
}

export type AlertWindowsQueryResponseItemsItemEnd = string | null;

export type AlertWindowsQueryResponseItemsItem = {
	end: AlertWindowsQueryResponseItemsItemEnd;
	expected_cost: number;
	metric: string;
	real_cost: number;
	service: string;
	start: string;
};

export interface AlertWindowsQueryResponse {
	from_date: string;
	interval: number;
	items: AlertWindowsQueryResponseItemsItem[];
	to_date: string;
}

export type UsagePercentilesResponseItemsItem = {
	metric: string;
	p50: number;
	p90: number;
	p95: number;
	pmax: number;
	service: string;
};

export interface UsagePercentilesResponse {
	from_date: string;
	interval: number;
	items: UsagePercentilesResponseItemsItem[];
	to_date: string;
}

export type UsageResponseItemsItem = {
	cost: number;
	metric: string;
	service: string;
	timestamp: string;
};

export interface UsageResponse {
	from_date: string;
	interval: number;
	items: UsageResponseItemsItem[];
	to_date: string;
}

export type alertRulesResponse200 = {
	data: AlertRuleListResponse;
	status: 200;
};

export type alertRulesResponseComposite = alertRulesResponse200;

export type alertRulesResponse = alertRulesResponseComposite & {
	headers: Headers;
};

export const getAlertRulesUrl = () => {
	return "__API_URL__/alert-rules";
};

export const alertRules = async (
	options?: RequestInit,
): Promise<alertRulesResponse> => {
	const res = await fetch(getAlertRulesUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: alertRulesResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as alertRulesResponse;
};

export type updateAlertRuleResponse200 = {
	data: AlertRule;
	status: 200;
};

export type updateAlertRuleResponseComposite = updateAlertRuleResponse200;

export type updateAlertRuleResponse = updateAlertRuleResponseComposite & {
	headers: Headers;
};

export const getUpdateAlertRuleUrl = () => {
	return "__API_URL__/alert-rules";
};

export const updateAlertRule = async (
	alertRule: AlertRule,
	options?: RequestInit,
): Promise<updateAlertRuleResponse> => {
	const res = await fetch(getUpdateAlertRuleUrl(), {
		...options,
		method: "PUT",
		headers: { "Content-Type": "application/json", ...options?.headers },
		body: JSON.stringify(alertRule),
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: updateAlertRuleResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as updateAlertRuleResponse;
};

export type alertWindowsResponse200 = {
	data: AlertWindowsQueryResponse;
	status: 200;
};

export type alertWindowsResponseComposite = alertWindowsResponse200;

export type alertWindowsResponse = alertWindowsResponseComposite & {
	headers: Headers;
};

export const getAlertWindowsUrl = () => {
	return "__API_URL__/alert-windows";
};

export const alertWindows = async (
	options?: RequestInit,
): Promise<alertWindowsResponse> => {
	const res = await fetch(getAlertWindowsUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: alertWindowsResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as alertWindowsResponse;
};

export type usageResponse200 = {
	data: UsageResponse;
	status: 200;
};

export type usageResponseComposite = usageResponse200;

export type usageResponse = usageResponseComposite & {
	headers: Headers;
};

export const getUsageUrl = () => {
	return "__API_URL__/usage";
};

export const usage = async (options?: RequestInit): Promise<usageResponse> => {
	const res = await fetch(getUsageUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: usageResponse["data"] = body ? JSON.parse(body) : {};

	return { data, status: res.status, headers: res.headers } as usageResponse;
};

export type usagePercentilesResponse200 = {
	data: UsagePercentilesResponse;
	status: 200;
};

export type usagePercentilesResponseComposite = usagePercentilesResponse200;

export type usagePercentilesResponse = usagePercentilesResponseComposite & {
	headers: Headers;
};

export const getUsagePercentilesUrl = () => {
	return "__API_URL__/usage-percentiles";
};

export const usagePercentiles = async (
	options?: RequestInit,
): Promise<usagePercentilesResponse> => {
	const res = await fetch(getUsagePercentilesUrl(), {
		...options,
		method: "GET",
	});

	const body = [204, 205, 304].includes(res.status) ? null : await res.text();
	const data: usagePercentilesResponse["data"] = body ? JSON.parse(body) : {};

	return {
		data,
		status: res.status,
		headers: res.headers,
	} as usagePercentilesResponse;
};
